/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AccidentInterface.java
 *
 * Created on 21/Nov/2011, 9:11:56
 */
package visual;

import application.Utils;
import components.ColorRenderer;
import jadex.extension.envsupport.environment.IEnvironmentSpace;
import java.awt.Color;
import java.util.HashMap;
import java.util.Map;

import jadex.extension.envsupport.environment.space2d.Space2D;
import jadex.extension.envsupport.math.Vector2Int;

import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Bruno
 */
public class AccidentInterface extends javax.swing.JFrame {

    private Space2D space;
    /** Creates new form AccidentInterface */
    public AccidentInterface(IEnvironmentSpace space) {
        initComponents();
        this.space = (Space2D) space;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new MyTableModel());
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jTable1.setDefaultRenderer(Color.class, new ColorRenderer(true));
        jTable1.setTableHeader(null);

        jTable1.addMouseListener(new java.awt.event.MouseAdapter(){

            public void mouseClicked(java.awt.event.MouseEvent e){
                int row = jTable1.rowAtPoint(e.getPoint());
                int col = jTable1.columnAtPoint(e.getPoint());

                Space2D grid = (Space2D) space;
                Map props = new HashMap();
                props.put("state", "notavoid");
                props.put(Space2D.PROPERTY_POSITION, new Vector2Int(col, row));
                grid.createSpaceObject("accident", props, null);

                // Utils.map[row][col]=0;
                System.out.println(" col : "+ col + "row : " + row);
                System.out.println(Utils.map[col][row]);

            }

        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    
    class MyTableModel extends AbstractTableModel {
       
        private String[] columnNames = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                                        "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" };
        private Object[][] data = {
            { Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green },
        {Color.green, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.gray, Color.green, Color.green },
        {Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green, Color.green},
    
        };

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            return data.length;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data[row][col];
        }

        /*
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         */
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
          
                return true;
            
        }

        public void setValueAt(Object value, int row, int col) {

            data[row][col] = value;
            fireTableCellUpdated(row, col);

        }

       
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            private IEnvironmentSpace space;

            public void run() {
                new AccidentInterface(space).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
